/**
 * JJTree template file created by SF JavaCC plugin 1.5.17+ wizard for JavaCC 1.5.0+
 */options{  JDK_VERSION = "1.5";  static = true;
  multi = true;
  visitor = true;
  track_tokens = true;}PARSER_BEGIN(SIMPL)package com.simPL.compiler;

public class SIMPL{  public static void main(String args [])  {    System.out.println("Reading from standard input...");    System.out.print("Enter an expression like \"1+(2+3)*var;\" :");    new SIMPL(System.in);    try    {      SimpleNode n = SIMPL.Start();      n.dump("");      System.out.println("Thank you.");    }    catch (Exception e)    {      System.out.println("Oops.");      System.out.println(e.getMessage());    }  }}PARSER_END(SIMPL)SKIP :{  " "| "\t"| "\n"| "\r"| < "//" (~[ "\n", "\r" ])*    (      "\n"    | "\r"    | "\r\n"    ) >| < "/*" (~[ "*" ])* "*"    (      ~[ "/" ] (~[ "*" ])* "*"    )*    "/" >}

SPECIAL_TOKEN : /* COMMENTS */
{
  < SINGLE_LINE_COMMENT :
    "//" (~[ "\n", "\r" ])*
    (
      "\n"
    | "\r"
    | "\r\n"
    ) >
| < FORMAL_COMMENT :
    "/**" (~[ "*" ])* "*"
    (
      "*"
    |
      (
        ~[ "*", "/" ] (~[ "*" ])* "*"
      )
    )*
    "/" >
| < MULTI_LINE_COMMENT :
    "/*" (~[ "*" ])* "*"
    (
      "*"
    |
      (
        ~[ "*", "/" ] (~[ "*" ])* "*"
      )
    )*
    "/" >
}

TOKEN : /* reserved words */
{
  < FUN : "fun" >
| < LET : "let" >
| < IN : "in" >
| < END : "end" >
| < IF : "if" >
| < THEN : "then" >
| < ELSE : "else" >
| < WHILE : "while" >
| < DO : "do" >
| < NIL : "nil" >
| < FST : "fst" >
| < SND : "snd" >| < HEAD : "head" >
| < TAIL : "tail" >
| < AND : "and" >
| < OR : "or" >
| < NOT : "not" >
| < TRUE : "true" >
| < FALSE : "false" >
}

TOKEN : /*punctuation characters*/
{  < LIST : "::" >
| < COMMA : "," >
| < LPAREN : "(" >
| < RPAREN : ")" >
| < ASSIGN : ":=" >
| < EQUAL : "=" >
| < ANONYFUN : "->" >
| < PLUS : "+" >
| < MINUS : "-" >
| < MULTI : "*" >
| < DIVID : "/" >
| < BT : ">" >
| < LT : "<" >
| < TILDE : "~" >
| < SEMICOLON : ";" >
}
TOKEN : /* LITERALS */{  < INTEGER_LITERAL :    < DECIMAL_LITERAL > ([ "l", "L" ])?  | < HEX_LITERAL > ([ "l", "L" ])?  | < OCTAL_LITERAL > ([ "l", "L" ])?     >| < #DECIMAL_LITERAL : [ "1"-"9" ] ([ "0"-"9" ])* >| < #HEX_LITERAL : "0" [ "x", "X" ] ([ "0"-"9", "a"-"f", "A"-"F" ])+ >| < #OCTAL_LITERAL : "0" ([ "0"-"7" ])* >}TOKEN : /* IDENTIFIERS */{  < IDENTIFIER :    < LETTER >    (      < LETTER >    | < DIGIT >    )* >| < #LETTER : [ "_", "a"-"z", "A"-"Z" ] >| < #DIGIT : [ "0"-"9" ] >}SimpleNode Start() #START:{}{  Expression() "$"  {    return jjtThis;  }}void Expression() #void:{}{  //AdditiveExpression()
  SequenceExp()}

void SequenceExp() #void:
{}
{  AssignExp()
  (    LOOKAHEAD(2)< SEMICOLON > AssignExp()
  )* 
} 

void AssignExp() #void:{}
{
  ListExp()
  (    LOOKAHEAD(2)< ASSIGN >ListExp()
  )*
}

void ListExp() #void:
{}
{  BinExp()
  (    LOOKAHEAD(2)< LIST >BinExp()
  )*
}
void BinExp() #void:
{}
{  AndOrExp()
}

void AndOrExp() #void:
{}
{  CompareExp()
  (
    LOOKAHEAD(2)(      < AND >
  	| < OR >
	)
  CompareExp()  )*
}

void CompareExp() #void:
{}
{
  AddMinusExp()  (    LOOKAHEAD(2)(      < LT >
    | < BT >
    | < EQUAL >
  	)
  	AddMinusExp()
  )*
}

void AddMinusExp() #void:
{}
{
  MulDivExp()
  (    LOOKAHEAD(2)(      < PLUS >
    | < MINUS >
    )
    MulDivExp()
  )*
}

void MulDivExp() #void:
{}
{  PrimaryExp()
  ( 
	  LOOKAHEAD(2)(
	    < MULTI >
	  | < DIVID >	  )
	  PrimaryExp() 
  )*
}

void PrimaryExp() :{}
{
//  LOOKAHEAD(3)PairExp()
//| LOOKAHEAD(3)ApplicationExp()
 Variable()
| UnaryExp()
| LetExp()
| ConditionExp()
| WhileExp()
| BracketExp()
| Value()}

void PairExp() :
{}
{
  Expression() < COMMA > Expression()
}

void ApplicationExp() :
{}
{  Expression() Expression()
}

void UnaryExp():
{}{
  < TILDE >
| < NOT >
| < FST >
| < SND >
| < HEAD >
| < TAIL >
PrimaryExp()
}

void LetExp() :
{}
{  < LET > Variable() < EQUAL > Expression() < IN > Expression() < END >
}
void ConditionExp() :
{}
{  < IF > Expression() < THEN > Expression() < ELSE > Expression()< END >
}

void WhileExp() :
{}
{  < WHILE >Expression()< DO >Expression()< END >
}

void BracketExp() :
{}
{  < LPAREN >
  Expression()
  (    
    (< COMMA >)?
     Expression()
  )?
  < RPAREN >
}

void Value() :
{}
{  ValueTerm()
//  (//    LOOKAHEAD(2)< LIST > ValueTerm()
//  )*
}

void ValueTerm() :{}
{  Integer()
| Bool()
| < NIL >
//| LOOKAHEAD(2)< LPAREN >< RPAREN >
| Function()
//| < LPAREN >Value()< COMMA >Value()< RPAREN >
}

void Function() :
{}{  < FUN > Variable()< ANONYFUN > Expression()
}

void Variable() :
{}
{  < IDENTIFIER >
}
void Integer() :{}{  < INTEGER_LITERAL >}

void Bool() :
{}
{  < TRUE >
| < FALSE >
}
