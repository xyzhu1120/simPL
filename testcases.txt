let 
	mod = 
		fun x -> 
			fun y -> x - x / y * y 
			end 
		end
in 
	let 
		gcd = 
			fun x -> 
				fun y -> 
					if (( mod x ) y) = 0 
						then y 
						else ((gcd y)((mod x) y)) 
					end 
				end 
			end
	in ((gcd 34986) 3087)
	end
end
$

let 
	mod = 
		fun x -> 
			fun y -> x - x / y * y 
in 
	let 
		gcd = 
			fun x -> 
				fun y -> 
					if (( mod x ) y) = 0 
						then y 
						else ((gcd y)((mod x) y)) 
					end 
	in ((gcd 34986) 3087)
	end
end
$

let a = 1 in 
	let b = 1 in
		b:= a;
		a:=2;
		b:=b+1;
		b+1
	end
end$

let a=1 in
	if true then a else a:=2 end
end$

let a = 10 in
	let b = 10 in 
		while a > 0 do b := b+1;a := a-1 end
	end;
	b
end$

let 
	mod = 
		fun x -> 
			fun y -> x - x / y * y 
			end 
		end
in 
	((mod 100) 7)
end$

let x = fun y -> if true then y else y:=2 end end in (x 1) end$

fun x -> fun y -> x:=y;x:=x+1 end end$

2::(1::nil)

let a = fun x -> if x > ~10 then (a x-1) else 0 end end in (a 100) end$




let 
	mod = 
		fun x -> 
			fun y -> x - x / y * y 
			end 
		end
in 
	let 
		gcd = 
			fun x -> 
				fun y -> 
					if (( mod x ) y) = 0 
						then y 
						else ((gcd y)((mod x) y)) 
					end 
				end 
			end
	in mod=gcd
	end
end
$

let flag = true in
	let flagres = false in
		let tmpint = 1 in
			let tmphead = 1 in 
				let inlist = 
					fun list -> 
						fun n ->
							fun element ->
								while(flag)
								do
									if(tmpint > n)
									then 
										flag := false
									else 
										tmpint := tmpint + 1;
										tmphead := head list;
										if tmphead = element
										then
											flag := false;
											flagres := true
										else ()
										end;
										list := tail list
									end
								end;
								flagres
							end
						end
					end
					in
						(((inlist 0::(1::(2::(3::nil)))) 4) 3)
				end
			end
		end
	end
end$


let 
	arrsize = fun arr->
		let
			size = 0
		in
			while not (arr = nil) do
				size := size + 1;
				arr := tail arr
			end;
			size
		end
in
	let
		safe=fun q-> fun cur-> fun result->
			let
				flag = true
			in
				let
					size = (arrsize result)
				in
					if size > 0 then
						let
							first = head result
						in
							if q = first then
								flag := false
							else() 
							end;
							if (q - first) = cur or (first - q) = cur then
								flag := false
							else()
							end;
							flag := flag and (((safe q) (cur + 1) ) (tail result) )
						end
					else () end;
					flag
				end
			end
	in
		let
			traceback= fun n-> fun max-> fun result->
				let
					i = 1
				in
					if n > 0 then
						while i < (max + 1)  do
							if (((safe i) 1) result) then
								result := i :: result;
								result := (((traceback n - 1) max) result);
								if ( arrsize result ) = max then
									i := max + 1
								else 
									result := tail result 
								end
							else () end;
							i := i+1
						end;
						result
					else 
						result
					end
				end
		in
			let
				queens = fun n ->(((traceback n)n )nil)
			in
				(queens 8)
				

((fun x -> fun y -> x+y 2)3)$

let 
	mod = 
		fun x -> 
			fun y -> x - x / y * y 
			end 
		end
in 
	let 
		gcd = 
			fun x -> 
				fun y -> 
					if (( mod x ) y) = 0 
						then y 
						else ((gcd y)((mod x) y)) 
					end 
				end 
			end
	in ((gcd 85) 43)
	end
end
$

let
			traceback= fun n-> fun max-> fun result->
				let
					i = 1
				in
					if n > 0 then
						
						result
					else 
						result
					end
				end
		in
			
				(((traceback 2)2 )2)
			
		end$